import jax_test3 as jt3
import pytest as pt

import analytical


@pt.mark.parametrize(
    "x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b",
    [
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0, 1.0),
        (0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 1.0, 1.0),
        (-1.0, -2.0, -3.0, 0.0, 0.0, 0.0, 1.0, 1.0),
        (0.0, 0.0, 0.0, -1.0, -2.0, -3.0, 1.0, 1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 5.0, 2.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, -1.0, -1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, -2.0, -3.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0, -1.0),
        (3.0, 2.0, 1.0, 1.0, 2.0, 3.0, 1.0, 1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0, 0.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    ],
)
def test_grad(x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b):
    ref_grad = analytical.gradient(x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b)
    jax_grad = jt3.get_grad(6, x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b)
    assert jax_grad == pt.approx(ref_grad)


@pt.mark.parametrize(
    "x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b",
    [
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0, 1.0),
        (0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 1.0, 1.0),
        (-1.0, -2.0, -3.0, 0.0, 0.0, 0.0, 1.0, 1.0),
        (0.0, 0.0, 0.0, -1.0, -2.0, -3.0, 1.0, 1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 5.0, 2.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, -1.0, -1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, -2.0, -3.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0, -1.0),
        (3.0, 2.0, 1.0, 1.0, 2.0, 3.0, 1.0, 1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0, 0.0),
        (1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0),
    ],
)
def test_hessian(x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b):
    ref_hess = analytical.hessian(x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b)
    jax_hess = jt3.get_hessian(6, x_a, y_a, z_a, x_b, y_b, z_b, c_a, c_b)
    assert jax_hess == pt.approx(ref_hess)
